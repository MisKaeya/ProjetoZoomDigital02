// Copyright (C) 2025  Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Altera and sold by Altera or its authorized distributors.  Please
// refer to the Altera Software License Subscription Agreements 
// on the Quartus Prime software download page.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/15/2025 11:46:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [7:0] DATA_IN;
reg ENABLE;
reg [2:0] INSTRUCTION;
reg [16:0] MEM_ADDR;
// wires                                               
wire [7:0] DATA_OUT;
wire FLAG_DONE;
wire FLAG_ERROR;
wire FLAG_ZOOM_MAX;
wire FLAG_ZOOM_MIN;
wire [7:0] VGA_B;
wire VGA_BLANK_N;
wire VGA_CLK;
wire [7:0] VGA_G;
wire VGA_H_SYNC_N;
wire [7:0] VGA_R;
wire VGA_SYNC;
wire VGA_V_SYNC_N;
wire addr_control_done;
wire [16:0] addr_in_memory;
wire [7:0] data_in_memory;
wire [2:0] op_count;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.DATA_IN(DATA_IN),
	.DATA_OUT(DATA_OUT),
	.ENABLE(ENABLE),
	.FLAG_DONE(FLAG_DONE),
	.FLAG_ERROR(FLAG_ERROR),
	.FLAG_ZOOM_MAX(FLAG_ZOOM_MAX),
	.FLAG_ZOOM_MIN(FLAG_ZOOM_MIN),
	.INSTRUCTION(INSTRUCTION),
	.MEM_ADDR(MEM_ADDR),
	.VGA_B(VGA_B),
	.VGA_BLANK_N(VGA_BLANK_N),
	.VGA_CLK(VGA_CLK),
	.VGA_G(VGA_G),
	.VGA_H_SYNC_N(VGA_H_SYNC_N),
	.VGA_R(VGA_R),
	.VGA_SYNC(VGA_SYNC),
	.VGA_V_SYNC_N(VGA_V_SYNC_N),
	.addr_control_done(addr_control_done),
	.addr_in_memory(addr_in_memory),
	.data_in_memory(data_in_memory),
	.op_count(op_count)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #10000 1'b1;
	#10000;
end 
// DATA_IN[ 7 ]
initial
begin
	DATA_IN[7] = 1'b0;
end 
// DATA_IN[ 6 ]
initial
begin
	DATA_IN[6] = 1'b0;
end 
// DATA_IN[ 5 ]
initial
begin
	DATA_IN[5] = 1'b0;
end 
// DATA_IN[ 4 ]
initial
begin
	DATA_IN[4] = 1'b1;
end 
// DATA_IN[ 3 ]
initial
begin
	DATA_IN[3] = 1'b0;
end 
// DATA_IN[ 2 ]
initial
begin
	DATA_IN[2] = 1'b1;
end 
// DATA_IN[ 1 ]
initial
begin
	DATA_IN[1] = 1'b0;
end 
// DATA_IN[ 0 ]
initial
begin
	DATA_IN[0] = 1'b1;
end 

// ENABLE
initial
begin
	ENABLE = 1'b0;
	ENABLE = #10000 1'b1;
	ENABLE = #30000 1'b0;
end 
// INSTRUCTION[ 2 ]
initial
begin
	INSTRUCTION[2] = 1'b0;
end 
// INSTRUCTION[ 1 ]
initial
begin
	INSTRUCTION[1] = 1'b1;
end 
// INSTRUCTION[ 0 ]
initial
begin
	INSTRUCTION[0] = 1'b1;
end 
endmodule

